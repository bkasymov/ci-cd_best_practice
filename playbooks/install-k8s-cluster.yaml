---
- name: Set up Kubernetes Single-Node Cluster
  hosts: webserver
  become: yes
  vars:
    kubernetes_version: "1.30.0"
    containerd_version: "1.6.24"
    calico_version: "v3.26.1"
    ingress_nginx_version: "controller-v1.8.2"
    pod_network_cidr: "10.244.0.0/16"
    kubernetes_repo_base_url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version | regex_replace('^(\\d+\\.\\d+).*', '\\1') }}/deb"
    containerd_config_path: "/etc/containerd/config.toml"
    calico_manifest_url: "https://docs.projectcalico.org/manifests/calico.yaml"
    server_ip: "{{ ansible_default_ipv4.address }}"
    ingress_nginx_manifest_url: "https://raw.githubusercontent.com/kubernetes/ingress-nginx/{{ ingress_nginx_version }}/deploy/static/provider/cloud/deploy.yaml"
    domain_name: bkasymov.online

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Disable swap
      command: swapoff -a

    - name: Comment out swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '#\1'

    - name: Install containerd
      apt:
        name: "containerd={{ containerd_version }}*"
        state: present

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Configure containerd
      shell: containerd config default | tee {{ containerd_config_path }}

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Load necessary modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: Load modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Set up required sysctl params
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/k8s.conf

    - name: Apply sysctl params
      command: sysctl --system

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present

    - name: Add Kubernetes apt-key
      apt_key:
        url: "{{ kubernetes_repo_base_url }}/Release.key"
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb {{ kubernetes_repo_base_url }} /"
        state: present
        filename: kubernetes

    - name: Install Kubernetes components
      apt:
        name:
          - "kubelet={{ kubernetes_version }}-*"
          - "kubeadm={{ kubernetes_version }}-*"
          - "kubectl={{ kubernetes_version }}-*"
        state: present

    - name: Hold Kubernetes components
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}

    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Install Calico network plugin
      kubernetes:
        definition: "{{ lookup('url', calico_manifest_url) | from_yaml }}"

    - name: Remove taint from control-plane node
      command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

    - name: Wait for cluster to be ready
      command: kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Install NGINX Ingress Controller
      block:
        - name: Download NGINX Ingress Controller manifest
          get_url:
            url: "{{ ingress_nginx_manifest_url }}"
            dest: "/tmp/ingress-nginx-controller.yaml"
            mode: "0644"

    - name: Apply NGINX Ingress Controller manifest
      kubernetes:
        state: present
        definition: "{{ lookup('file', '/tmp/ingress-nginx-controller.yaml') | from_yaml_all | list }}"

    - name: Wait for NGINX Ingress Controller pods to be ready
      kubernetes:
        api_version: v1
        kind: Pod
        namespace: ingress-nginx
        label_selectors:
          - "app.kubernetes.io/component=controller"
        wait: yes
        wait_timeout: 300

    - name: Get NGINX Ingress Controller service details
      kubernetes:
        api_version: v1
        kind: Service
        namespace: ingress-nginx
        name: ingress-nginx-controller
      register: ingress_service

    - name: Make NGINX IngressClass the default
      kubernetes:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: IngressClass
          metadata:
            name: nginx
            annotations:
              ingressclass.kubernetes.io/is-default-class: "true"
          spec:
            controller: k8s.io/ingress-nginx

    - name: Display Ingress Controller access information
      debug:
        msg:
          - "NGINX Ingress Controller version {{ ingress_nginx_version }} installed successfully."
          - "Access it via: {{ ingress_service.result.spec.clusterIP }}"
          - "If using NodePort, the port is: {{ ingress_service.result.spec.ports[0].nodePort }}"

    - name: Patch ingress-nginx-controller service
      kubernetes:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: ingress-nginx-controller
            namespace: ingress-nginx
          spec:
            externalIPs:
              - "{{ ansible_default_ipv4.address }}"

      rescue:
        - name: Installation failed
          debug:
            msg: "Failed to install NGINX Ingress Controller. Please check the logs for more information."

    - name: Install Certbot
      apt:
        name: certbot
        state: present

    - name: Install Certbot NGINX plugin
      apt:
        name: python3-certbot-nginx
        state: present

    - name: Obtain Let's Encrypt certificate
      command: >
        certbot --nginx -d {{ domain_name }} -d www.{{ domain_name }}
      args:
        creates: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem

    - name: Verify Let's Encrypt certificate
      stat:
        path: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
      register: cert

    - name: Ensure Let's Encrypt certificate was obtained
      fail:
        msg: "Let's Encrypt certificate was not obtained!"
      when: not cert.stat.exists

    - name: Print completion message
      debug:
        msg: "Kubernetes single-node cluster with NGINX Ingress Controller is now set up!"
